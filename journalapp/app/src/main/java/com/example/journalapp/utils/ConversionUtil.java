package com.example.journalapp.utils;

import android.text.Html;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.Spanned;

import com.example.journalapp.ui.note.NoteItem;
import com.example.journalapp.database.entity.NoteItemEntity;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;

/**
 * Utility class for converting between different UI objects
 * Excludes Room Database Conversions
 */
public class ConversionUtil {


    /**
     * Converts a list of NoteItem objects to a list of NoteItemEntity objects
     * Can be used before saving items to a database
     * @param items
     * @param noteId
     * @return
     */
    public static List<NoteItemEntity> convertNoteItemsToEntities(List<NoteItem> items, String noteId) {
        List<NoteItemEntity> entities = new ArrayList<>();
        for (NoteItem item : items) {
            entities.add(new NoteItemEntity(
                    null, // ID will be auto-generated by the database
                    noteId,
                    item.getType().ordinal(),
                    item.getContent(),
                    item.getOrderIndex()
            ));
        }
        return entities;
    }

    /**
     * Converts a list of NoteItemEntity objects ot a list of NoteItem objects
     * Typically used when fetching items from the database to be displayed in UI
     * @param noteItemEntities
     * @return
     */
    public static List<NoteItem> convertNoteItemEntitiesToNoteItems(List<NoteItemEntity> noteItemEntities) {
        List<NoteItem> noteItems = new ArrayList<>();
        for (NoteItemEntity entity : noteItemEntities) {
            // Convert integer type back to ItemType enum
            NoteItem.ItemType itemType = NoteItem.ItemType.values()[entity.getType()];

            // Create a new NoteItem with the data from NoteItemEntity
            noteItems.add(new NoteItem(itemType,entity.getItemId(), entity.getContent(),entity.getOrderIndex()));
        }
        return noteItems;
    }

    /**
     * Convert a Spannable into a String HTML
     * @param spannableBuilder
     * @return a String representing HTML of text
     */
    public static String spannableToHtml(SpannableStringBuilder spannableBuilder){
        return Html.toHtml(spannableBuilder);
    }

    /**
     * Convert HTML String to a Spannable
     * @param html
     * @return a Spannable that can be displayed
     */
    public static SpannableStringBuilder htmlToSpannable(String html){
        // Replace <p> tags with nothing, and </p> tags with a single newline character
        html = html.replaceAll("<p[^>]*>", "").replaceAll("</p>", "\n");

        // Convert HTML to spannable
        Spanned spanned = Html.fromHtml(html);

        // trim the end if it has an extra whitespace from conversion
        int end = spanned.length();
        while (end > 0 && (Character.isWhitespace(spanned.charAt(end - 1)) || spanned.charAt(end - 1) == '\n')) {
            end--;
        }

        return new SpannableStringBuilder(spanned, 0, end);
    }

    /**
     * Strips all HTML Tags in a given string and returns the string without HTML Tags
     * @param html
     * @return
     */
    public static String stripHtmlTags(String html) {
        if (html == null) {
            return "";
        }
        return html.replaceAll("<[^>]*>", "").trim();
    }

    /**
     * Creates a string using the ISO 8601 format which is a sortable format for the database
     * @return
     */
    public static String getDateAsString(){
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss", Locale.getDefault());
        String currentDateStr = sdf.format(new Date());
        return currentDateStr;
    }

    public static String convertLongToIso8601(Long timestamp) {
        if (timestamp == null) {
            return null;
        }
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
        sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
        return sdf.format(new Date(timestamp));
    }

    public static String trimDateToDay(String fullDateTime) {
        if (fullDateTime != null && !fullDateTime.isEmpty()) {
            String[] parts = fullDateTime.split("T");
            return parts[0];
        }
        return fullDateTime;
    }
}
